import type { Log } from '@sentry/core';
/**
 * @summary Capture a log with the `trace` level. Requires `_experiments.enableLogs` to be enabled.
 *
 * @param message - The message to log.
 * @param attributes - Arbitrary structured data that stores information about the log - e.g., userId: 100.
 *
 * @example
 *
 * ```
 * Sentry.logger.trace('Hello world', { userId: 100 });
 * ```
 */
export declare function trace(message: string, attributes?: Log['attributes']): void;
/**
 * @summary Capture a log with the `debug` level. Requires `_experiments.enableLogs` to be enabled.
 *
 * @param message - The message to log.
 * @param attributes - Arbitrary structured data that stores information about the log - e.g., userId: 100.
 *
 * @example
 *
 * ```
 * Sentry.logger.debug('Hello world', { userId: 100 });
 * ```
 */
export declare function debug(message: string, attributes?: Log['attributes']): void;
/**
 * @summary Capture a log with the `info` level. Requires `_experiments.enableLogs` to be enabled.
 *
 * @param message - The message to log.
 * @param attributes - Arbitrary structured data that stores information about the log - e.g., userId: 100.
 *
 * @example
 *
 * ```
 * Sentry.logger.info('Hello world', { userId: 100 });
 * ```
 */
export declare function info(message: string, attributes?: Log['attributes']): void;
/**
 * @summary Capture a log with the `warn` level. Requires `_experiments.enableLogs` to be enabled.
 *
 * @param message - The message to log.
 * @param attributes - Arbitrary structured data that stores information about the log - e.g., userId: 100.
 *
 * @example
 *
 * ```
 * Sentry.logger.warn('Hello world', { userId: 100 });
 * ```
 */
export declare function warn(message: string, attributes?: Log['attributes']): void;
/**
 * @summary Capture a log with the `error` level. Requires `_experiments.enableLogs` to be enabled.
 *
 * @param message - The message to log.
 * @param attributes - Arbitrary structured data that stores information about the log - e.g., userId: 100.
 *
 * @example
 *
 * ```
 * Sentry.logger.error('Hello world', { userId: 100 });
 * ```
 */
export declare function error(message: string, attributes?: Log['attributes']): void;
/**
 * @summary Capture a log with the `fatal` level. Requires `_experiments.enableLogs` to be enabled.
 *
 * @param message - The message to log.
 * @param attributes - Arbitrary structured data that stores information about the log - e.g., userId: 100.
 *
 * @example
 *
 * ```
 * Sentry.logger.fatal('Hello world', { userId: 100 });
 * ```
 */
export declare function fatal(message: string, attributes?: Log['attributes']): void;
/**
 * @summary Capture a log with the `critical` level. Requires `_experiments.enableLogs` to be enabled.
 *
 * @param message - The message to log.
 * @param attributes - Arbitrary structured data that stores information about the log - e.g., userId: 100.
 *
 * @example
 *
 * ```
 * Sentry.logger.critical('Hello world', { userId: 100 });
 * ```
 */
export declare function critical(message: string, attributes?: Log['attributes']): void;
//# sourceMappingURL=log.d.ts.map