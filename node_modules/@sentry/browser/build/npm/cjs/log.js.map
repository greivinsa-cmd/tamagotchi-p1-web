{"version":3,"file":"log.js","sources":["../../../src/log.ts"],"sourcesContent":["import type { LogSeverityLevel, Log, Client } from '@sentry/core';\nimport { getClient, _INTERNAL_captureLog, _INTERNAL_flushLogsBuffer } from '@sentry/core';\n\nimport { WINDOW } from './helpers';\n\n/**\n * TODO: Make this configurable\n */\nconst DEFAULT_FLUSH_INTERVAL = 5000;\n\nlet timeout: ReturnType<typeof setTimeout> | undefined;\n\n/**\n * This is a global timeout that is used to flush the logs buffer.\n * It is used to ensure that logs are flushed even if the client is not flushed.\n */\nfunction startFlushTimeout(client: Client): void {\n  if (timeout) {\n    clearTimeout(timeout);\n  }\n\n  timeout = setTimeout(() => {\n    _INTERNAL_flushLogsBuffer(client);\n  }, DEFAULT_FLUSH_INTERVAL);\n}\n\nlet isClientListenerAdded = false;\n/**\n * This is a function that is used to add a flush listener to the client.\n * It is used to ensure that the logger buffer is flushed when the client is flushed.\n */\nfunction addFlushingListeners(client: Client): void {\n  if (isClientListenerAdded || !client.getOptions()._experiments?.enableLogs) {\n    return;\n  }\n\n  isClientListenerAdded = true;\n\n  if (WINDOW.document) {\n    WINDOW.document.addEventListener('visibilitychange', () => {\n      if (WINDOW.document.visibilityState === 'hidden') {\n        _INTERNAL_flushLogsBuffer(client);\n      }\n    });\n  }\n\n  client.on('flush', () => {\n    _INTERNAL_flushLogsBuffer(client);\n  });\n}\n\n/**\n * Capture a log with the given level.\n *\n * @param level - The level of the log.\n * @param message - The message to log.\n * @param attributes - Arbitrary structured data that stores information about the log - e.g., userId: 100.\n * @param severityNumber - The severity number of the log.\n */\nfunction captureLog(\n  level: LogSeverityLevel,\n  message: string,\n  attributes?: Log['attributes'],\n  severityNumber?: Log['severityNumber'],\n): void {\n  const client = getClient();\n  if (client) {\n    addFlushingListeners(client);\n\n    startFlushTimeout(client);\n  }\n\n  _INTERNAL_captureLog({ level, message, attributes, severityNumber }, client, undefined);\n}\n\n/**\n * @summary Capture a log with the `trace` level. Requires `_experiments.enableLogs` to be enabled.\n *\n * @param message - The message to log.\n * @param attributes - Arbitrary structured data that stores information about the log - e.g., userId: 100.\n *\n * @example\n *\n * ```\n * Sentry.logger.trace('Hello world', { userId: 100 });\n * ```\n */\nexport function trace(message: string, attributes?: Log['attributes']): void {\n  captureLog('trace', message, attributes);\n}\n\n/**\n * @summary Capture a log with the `debug` level. Requires `_experiments.enableLogs` to be enabled.\n *\n * @param message - The message to log.\n * @param attributes - Arbitrary structured data that stores information about the log - e.g., userId: 100.\n *\n * @example\n *\n * ```\n * Sentry.logger.debug('Hello world', { userId: 100 });\n * ```\n */\nexport function debug(message: string, attributes?: Log['attributes']): void {\n  captureLog('debug', message, attributes);\n}\n\n/**\n * @summary Capture a log with the `info` level. Requires `_experiments.enableLogs` to be enabled.\n *\n * @param message - The message to log.\n * @param attributes - Arbitrary structured data that stores information about the log - e.g., userId: 100.\n *\n * @example\n *\n * ```\n * Sentry.logger.info('Hello world', { userId: 100 });\n * ```\n */\nexport function info(message: string, attributes?: Log['attributes']): void {\n  captureLog('info', message, attributes);\n}\n\n/**\n * @summary Capture a log with the `warn` level. Requires `_experiments.enableLogs` to be enabled.\n *\n * @param message - The message to log.\n * @param attributes - Arbitrary structured data that stores information about the log - e.g., userId: 100.\n *\n * @example\n *\n * ```\n * Sentry.logger.warn('Hello world', { userId: 100 });\n * ```\n */\nexport function warn(message: string, attributes?: Log['attributes']): void {\n  captureLog('warn', message, attributes);\n}\n\n/**\n * @summary Capture a log with the `error` level. Requires `_experiments.enableLogs` to be enabled.\n *\n * @param message - The message to log.\n * @param attributes - Arbitrary structured data that stores information about the log - e.g., userId: 100.\n *\n * @example\n *\n * ```\n * Sentry.logger.error('Hello world', { userId: 100 });\n * ```\n */\nexport function error(message: string, attributes?: Log['attributes']): void {\n  captureLog('error', message, attributes);\n}\n\n/**\n * @summary Capture a log with the `fatal` level. Requires `_experiments.enableLogs` to be enabled.\n *\n * @param message - The message to log.\n * @param attributes - Arbitrary structured data that stores information about the log - e.g., userId: 100.\n *\n * @example\n *\n * ```\n * Sentry.logger.fatal('Hello world', { userId: 100 });\n * ```\n */\nexport function fatal(message: string, attributes?: Log['attributes']): void {\n  captureLog('fatal', message, attributes);\n}\n\n/**\n * @summary Capture a log with the `critical` level. Requires `_experiments.enableLogs` to be enabled.\n *\n * @param message - The message to log.\n * @param attributes - Arbitrary structured data that stores information about the log - e.g., userId: 100.\n *\n * @example\n *\n * ```\n * Sentry.logger.critical('Hello world', { userId: 100 });\n * ```\n */\nexport function critical(message: string, attributes?: Log['attributes']): void {\n  captureLog('critical', message, attributes);\n}\n"],"names":["_INTERNAL_flushLogsBuffer","WINDOW","getClient","_INTERNAL_captureLog"],"mappings":"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"}